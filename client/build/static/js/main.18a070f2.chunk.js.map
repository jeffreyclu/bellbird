{"version":3,"sources":["components/chirp/chirp.module.css","components/chirper/chirper.module.css","components/app/app.module.css","components/upvoter/upvoter.module.css","components/upvote-container/upvote-container.module.css","components/upvoter/upvoter.js","components/upvote-container/upvote-container.js","components/chirp/chirp.js","components/chirper/chirper.js","components/app/app.js","reportWebVitals.js","index.js"],"names":["module","exports","Upvoter","id","setStatus","handleUpvoter","a","fetch","method","mode","cache","credentials","body","response","json","styles","upvoter","onClick","UpvoteContainer","upvotes","className","upvoteContainer","Chirp","text","chirp","chirpId","chirpText","toUpperCase","Chirper","useState","setChirp","submitNotification","data","headers","JSON","stringify","chirp_id","result","console","log","success","submitChirp","setTimeout","chirperContainer","chirpInput","placeholder","type","onChange","e","target","value","chirper","App","chirps","setChirps","status","useEffect","fetchChirps","chirpsFeed","reverse","map","i","app","chirpContainer","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"sFACAA,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,QAAU,uBAAuB,UAAY,2B,gBCA5FD,EAAOC,QAAU,CAAC,iBAAmB,kCAAkC,WAAa,4BAA4B,QAAU,2B,gBCA1HD,EAAOC,QAAU,CAAC,IAAM,iBAAiB,eAAiB,4BAA4B,OAAS,sB,kBCA/FD,EAAOC,QAAU,CAAC,QAAU,2B,gBCA5BD,EAAOC,QAAU,CAAC,gBAAkB,4C,qJCyBrBC,EAtBC,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,GAAIC,EAAgB,EAAhBA,UACfC,EAAa,uCAAG,4BAAAC,EAAA,sEACGC,MAAM,qBAAD,OACLJ,GACrB,CACEK,OAAQ,MACRC,KAAM,OACNC,MAAO,WACPC,YAAa,cACbC,KAAM,OARU,cACdC,EADc,gBAWDA,EAASC,OAXR,eAalBV,EAAU,YAbQ,2CAAH,qDAgBnB,OACE,wBAAQW,OAAQA,IAAOC,QAASC,QAASZ,EAAzC,qB,iBCTWa,EARS,SAAC,GAAgC,IAA9Bf,EAA6B,EAA7BA,GAAIC,EAAyB,EAAzBA,UAAWe,EAAc,EAAdA,QACxC,OACE,sBAAKC,UAAWL,IAAOM,gBAAvB,UACE,+BAAOF,IACP,cAAC,EAAD,CAAShB,GAAIA,EAAIC,UAAWA,Q,gBCMnBkB,EAVD,SAAC,GAAsC,IAApCnB,EAAmC,EAAnCA,GAAIoB,EAA+B,EAA/BA,KAAMnB,EAAyB,EAAzBA,UAAWe,EAAc,EAAdA,QACpC,OACE,qBAAIC,UAAWL,IAAOS,MAAtB,UACE,sBAAMJ,UAAWL,IAAOU,QAAxB,SAAkCtB,IAClC,sBAAMiB,UAAWL,IAAOW,UAAxB,SAAoCH,EAAKI,gBACzC,cAAC,EAAD,CAAiBxB,GAAIA,EAAIC,UAAWA,EAAWe,QAASA,Q,gBC6D/CS,EAlEC,SAAC,GAAmB,IAAjBxB,EAAgB,EAAhBA,UAAgB,EACPyB,mBAAS,IADF,mBAC1BL,EAD0B,KACnBM,EADmB,KAQ3BC,EAAkB,uCAAG,WAAOC,GAAP,iBAAA1B,EAAA,+EAEAC,MACrB,mDACA,CACEC,OAAQ,OACRyB,QAAS,CACP,eAAgB,oBAElBrB,KAAMsB,KAAKC,UAAU,CAAEC,SAAUJ,EAAK7B,OATnB,cAEjBU,EAFiB,gBAYFA,EAASC,OAZP,OAYjBuB,EAZiB,OAavBC,QAAQC,IAAIF,GACRA,EAAOG,UACTV,EAAS,IACT1B,EAAU,aAhBW,kDAmBvBkC,QAAQC,IAAR,MAnBuB,0DAAH,sDAuBlBE,EAAW,uCAAG,8BAAAnC,EAAA,+EAEOC,MAAM,kBAAmB,CAChDC,OAAQ,OACRC,KAAM,OACNC,MAAO,WACPC,YAAa,cACbsB,QAAS,CACP,eAAgB,oBAElBrB,KAAMsB,KAAKC,UAAU,CAAEZ,KAAMC,MAVb,cAEVX,EAFU,gBAYGA,EAASC,OAZZ,QAYVkB,EAZU,SAedU,YAAW,kBAAMX,EAAmBC,KAAO,KAf7B,kDAkBhBM,QAAQC,IAAR,MAlBgB,0DAAH,qDAqBjB,OACE,sBAAKnB,UAAWL,IAAO4B,iBAAvB,UACE,uBACEvB,UAAWL,IAAO6B,WAClBC,YAAY,kBACZC,KAAK,OACLC,SAxDiB,SAAAC,GACrBlB,EAASkB,EAAEC,OAAOC,QAwDdA,MAAO1B,IAET,wBAAQJ,UAAWL,IAAOoC,QAASlC,QAASwB,EAA5C,uB,gBCrBSW,MAvCf,WAAgB,IAAD,EACevB,mBAAS,IADxB,mBACNwB,EADM,KACEC,EADF,OAEezB,mBAAS,YAFxB,mBAEN0B,EAFM,KAEEnD,EAFF,KAGboD,qBAAU,WACO,aAAXD,IACFE,IACArD,EAAU,cAEX,CAACmD,IAEJ,IAAME,EAAW,uCAAG,8BAAAnD,EAAA,+EAEOC,MAAM,kBAFb,cAEVM,EAFU,gBAGGA,EAASC,OAHZ,OAGVkB,EAHU,OAIhBM,QAAQC,IAAI,OAAQP,GACpBsB,EAAUtB,GALM,kDAOhBM,QAAQC,IAAI,QAAZ,MAPgB,0DAAH,qDAWXmB,EAAaL,EAClBM,UAAUC,KAAI,WAAwBC,GAAxB,IAAG1D,EAAH,EAAGA,GAAIoB,EAAP,EAAOA,KAAMJ,EAAb,EAAaA,QAAb,OAA8B,cAAC,EAAD,CAA0BhB,GAAIA,EAAIoB,KAAMA,EAAMnB,UAAWA,EAAWe,QAASA,GAA7E,gBAAqB0C,OAElE,OACE,sBAAKzC,UAAWL,IAAO+C,IAAvB,UACE,wCACY,YAAXP,GACC,yBAASnC,UAAWL,IAAOgD,eAA3B,SACE,oBAAI3C,UAAWL,IAAOsC,OAAtB,SACGA,EAAOW,OAASN,EAAa,sDAIpC,cAAC,EAAD,CAAStD,UAAWA,QC5BX6D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAKjDZ,M","file":"static/js/main.18a070f2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"chirp\":\"chirp_chirp__2nYN_\",\"chirpId\":\"chirp_chirpId__1Z0zQ\",\"chirpText\":\"chirp_chirpText__1L99b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chirperContainer\":\"chirper_chirperContainer__34wRA\",\"chirpInput\":\"chirper_chirpInput__2wmI9\",\"chirper\":\"chirper_chirper__KyBzI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"app_app__M9MMq\",\"chirpContainer\":\"app_chirpContainer__1C5at\",\"chirps\":\"app_chirps__1bpOU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"upvoter\":\"upvoter_upvoter__jxD7L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"upvoteContainer\":\"upvote-container_upvoteContainer__1XA8k\"};","import React from 'react';\n\nimport styles from './upvoter.module.css';\n\nconst Upvoter = ({ id, setStatus }) => {\n  const handleUpvoter = async () => {\n    const response = await fetch(\n      `/api/chirp/upvote/${id}`,\n      {\n        method: 'PUT',\n        mode: 'cors',\n        cache: 'no-cache',\n        credentials: 'same-origin',\n        body: null\n      }\n    );\n    const data = await response.json();\n    if (data) {\n      setStatus('fetching');\n    }\n  }\n  return(\n    <button styles={styles.upvoter} onClick={handleUpvoter}>Upvote</button>\n  )\n}\n\nexport default Upvoter;\n","import React from 'react';\n\nimport Upvoter from '../upvoter/upvoter';\nimport styles from './upvote-container.module.css';\n\nconst UpvoteContainer = ({ id, setStatus, upvotes }) => {\n  return(\n    <div className={styles.upvoteContainer}>\n      <span>{upvotes}</span>\n      <Upvoter id={id} setStatus={setStatus} />\n    </div>\n  )\n}\nexport default UpvoteContainer;","import React from 'react';\n\nimport UpvoteContainer from '../upvote-container/upvote-container';\nimport styles from './chirp.module.css';\n\nconst Chirp = ({ id, text, setStatus, upvotes }) => {\n  return(\n    <li className={styles.chirp}>\n      <span className={styles.chirpId}>{id}</span> \n      <span className={styles.chirpText}>{text.toUpperCase()}</span>\n      <UpvoteContainer id={id} setStatus={setStatus} upvotes={upvotes} />\n    </li>\n  )\n}\n\nexport default Chirp;\n","import React, { useState } from 'react';\n// import { throttle } from '../../utils';\n\nimport styles from './chirper.module.css';\n\nconst Chirper = ({ setStatus }) => {\n  const [chirp, setChirp] = useState('');\n  const handleChirping = e => {\n    setChirp(e.target.value);\n  }\n  // TODO validate chirp length\n  \n  // TODO implement this\n  const submitNotification = async (data) => {\n    try {\n      const response = await fetch(\n        'https://bellbird.joinhandshake-internal.com/push',\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({ chirp_id: data.id })\n        }\n      );\n      const result = await response.json();\n      console.log(result);\n      if (result.success) {\n        setChirp('');\n        setStatus('fetching');\n      }\n    } catch(err) {\n      console.log(err);\n    }\n  };\n\n  const submitChirp = async () => {\n    try {\n      const response = await fetch('/api/chirp/post', {\n      method: 'POST',\n      mode: 'cors',\n      cache: 'no-cache',\n      credentials: 'same-origin',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({ text: chirp })\n    });\n      const data = await response.json();\n      if (data) {\n        // TODO throttle requests to external API \n        setTimeout(() => submitNotification(data), 500);\n      }\n    } catch(err) {\n      console.log(err);\n    }\n  }\n  return(\n    <div className={styles.chirperContainer}>\n      <input\n        className={styles.chirpInput} \n        placeholder=\"Chirp something\" \n        type=\"text\" \n        onChange={handleChirping} \n        value={chirp}\n      />\n      <button className={styles.chirper} onClick={submitChirp}>Chirp</button>\n    </div>\n  )\n}\n\nexport default Chirper;\n","import { useState, useEffect } from 'react';\n\nimport Chirp from '../chirp/chirp';\nimport Chirper from '../chirper/chirper';\nimport styles from './app.module.css';\n\nfunction App() {\n  const [chirps, setChirps] = useState([]);\n  const [status, setStatus] = useState('fetching');\n  useEffect(() => {\n    if (status === 'fetching') {\n      fetchChirps();\n      setStatus('fetched');\n    }\n  }, [status]);\n\n  const fetchChirps = async() => {\n    try {\n      const response = await fetch('/api/chirp/get');\n      const data = await response.json();\n      console.log('data', data)\n      setChirps(data);\n    } catch (err) {\n      console.log('error', err)\n    }\n  }\n\n  const chirpsFeed = chirps\n  .reverse().map(({ id, text, upvotes }, i) => <Chirp key={`Chirp ${i}`} id={id} text={text} setStatus={setStatus} upvotes={upvotes} />)\n\n  return (\n    <div className={styles.app}>\n      <h1>Chirps</h1>\n      {status === 'fetched' &&\n        <article className={styles.chirpContainer}>\n          <ul className={styles.chirps}>\n            {chirps.length ? chirpsFeed : <span>No Chirps Yet!</span>}\n          </ul>\n        </article>\n      }\n      <Chirper setStatus={setStatus} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/app';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}